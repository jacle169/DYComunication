<?xml version="1.0"?>
<doc>
  <assembly>
    <name>DYCom_Net2</name>
  </assembly>
  <members>
    <member name="T:DYCom_Net2.DYComer">
      <summary>
            DYCom服务组件
            </summary>
    </member>
    <member name="M:DYCom_Net2.DYComer.#ctor">
      <summary>
            DYCom组件构造函数
            </summary>
      <remarks>实例化DYCom服务组件</remarks>
    </member>
    <member name="M:DYCom_Net2.DYComer.Version">
      <summary>
            DYcom的产品版本号
            </summary>
      <returns>DYcom的产品版本号</returns>
    </member>
    <member name="M:DYCom_Net2.DYComer.TargetFramework">
      <summary>
            取得此DYCOM运行依赖的NETFrameWork版本
            </summary>
      <returns>DYcom运行要求的.NETFramework版本</returns>
    </member>
    <member name="M:DYCom_Net2.DYComer.Start(System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            启动服务
            </summary>
      <remarks>启动DYCom服务</remarks>
      <param name="port">服务端提供服务的端口号</param>
      <param name="maxConnets">允许最大接入客户端数量</param>
      <param name="BufferSize">每个客户端的接收缓冲区大小</param>
      <param name="key">DYCOM产品密钥</param>
    </member>
    <member name="M:DYCom_Net2.DYComer.Stop">
      <summary>
            停止服务
            </summary>
    </member>
    <member name="M:DYCom_Net2.DYComer.DisConnet(DYCom_Net2.DYSocket)">
      <summary>
            断开连接事件通信属性
            </summary>
      <remarks>断开并释放指定的客户端</remarks>
      <param name="e">要断开的客户端DYSocket</param>
    </member>
    <member name="M:DYCom_Net2.DYComer.SendToSingle``1(``0,System.Byte[])">
      <summary>
            发送消息给指定一个客户端
            </summary>
      <remarks>发送消息到参数中的客户端对象,客户端必须继承于UserInfo</remarks>
      <param name="info">客户端实例</param>
      <param name="data">消息体</param>
      <returns>返回True即发送成功，返回Flase即发送失败。</returns>
    </member>
    <member name="M:DYCom_Net2.DYComer.SendToAll``1(System.Collections.Generic.List{``0},System.Byte[])">
      <summary>
            发送消息到r指定的客户端集合
            </summary>
      <remarks>把消息发送到参数客户端集合里的所有客户端元素.客户端对象必须继承于UserInfo</remarks>
      <param name="Clients">客户端集合</param>
      <param name="Data">消息体</param>
      <returns>返回True即发送成功，返回Flase即发送失败。</returns>
    </member>
    <member name="M:DYCom_Net2.DYComer.SendWithOut``1(System.Collections.Generic.List{``0},DYCom_Net2.UserInfo,System.Byte[])">
      <summary>
            从集合中发送消息，不发送到指定一个客户端
            </summary>
      <remarks>消息发送到指定客户端的其他对象，客户端必须继承于UserInfo</remarks>
      <param name="Clients">指定要发送的客户端集合</param>
      <param name="info">指定要发送例外的客户端实例</param>
      <param name="Data">消息体</param>
      <returns>返回True即发送成功，返回Flase即发送失败。</returns>
    </member>
    <member name="P:DYCom_Net2.DYComer.onConnet">
      <summary>
            当客户端连接到服务时的通知事件
            </summary>
      <value>连接事件实例</value>
    </member>
    <member name="P:DYCom_Net2.DYComer.onData">
      <summary>
            当客户端消息到服务端时的通知事件
            </summary>
      <value>消息通知事件实例</value>
    </member>
    <member name="P:DYCom_Net2.DYComer.onDisconnet">
      <summary>
            在运行过程中出现异常会通知此事件通知
            </summary>
      <value>异常通知实例</value>
    </member>
    <member name="T:DYCom_Net2.DYSocketCore">
      <summary>
            DYcom核心组件
            </summary>
    </member>
    <member name="M:DYCom_Net2.DYSocketCore.Start">
      <summary>
            启动服务
            </summary>
      <remarks>启动核心服务</remarks>
    </member>
    <member name="M:DYCom_Net2.DYSocketCore.Stop">
      <summary>
            停止服务
            </summary>
      <remarks>停止核心服务</remarks>
    </member>
    <member name="M:DYCom_Net2.DYSocketCore.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            DYcom核心服务
            </summary>
      <remarks>他提供了最基础的通信方式,而且支持不用你自己协议进行同步通信,如果异步通信请使用DYComer里的通信接口,它同时支持异步通信.</remarks>
      <param name="port">端口</param>
      <param name="maxconnectcout">最大接入客户端数</param>
      <param name="maxbuffersize">每个客户端接收缓冲区大小</param>
      <param name="PDkey">DYCOM产品密钥</param>
    </member>
    <member name="M:DYCom_Net2.DYSocketCore.SendSync(DYCom_Net2.DYSocket,System.Byte[])">
      <summary>
            以同步方式发送数据
            </summary>
      <remarks>此方此为同步发送数据使用</remarks>
      <param name="sk">DYSocket对象</param>
      <param name="Data">要发送的数据</param>
    </member>
    <member name="M:DYCom_Net2.DYSocketCore.Disconnect(DYCom_Net2.DYSocket)">
      <summary>
            关闭此客户端
            </summary>
      <remarks>关闭此客户端,但并未释放,可以复用.</remarks>
      <param name="socks">socket对象</param>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.DYSock">
      <summary>
            DYSocket对象
            </summary>
      <remarks>DYSocket对象,只允许提取</remarks>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.ConnectOnCore">
      <summary>
            核心服务连接事件处理
            </summary>
      <remarks>当客户端连接成功后马上触发本事件.</remarks>
      <value>已注册事件实例</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.DataOnCore">
      <summary>
            核心服务消息到达事件处理
            </summary>
      <remarks>当客户端消息到达后马上触发本事件.</remarks>
      <value>消息事件实例</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.ErrorOnCore">
      <summary>
            核心服务异常或用户断开事件处理
            </summary>
      <remarks>当客户端异常或用户断开后马上触发本事件.</remarks>
      <value>异常事件实例</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.NoDelay">
      <summary>
            Delay算法
            </summary>
      <remarks>取得或设置Delay状态</remarks>
      <value>True为开启,False为禁用</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.ReceiveTimeout">
      <summary>
            接收消息超时属性
            </summary>
      <remarks>当接收某客户端连接传来数据时出现IO读取异常超过此属性值时,将触发异常通过到DYCom异常事件.</remarks>
      <value>超时时间[毫秒]</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.SendTimeout">
      <summary>
            发送消息超时属性
            </summary>
      <remarks>当向某客户端发送数据时出现IO读取异常超过此属性值时,将触发异常通过到DYCom异常事件.</remarks>
      <value>超时时间[毫秒]</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.GetMaxBufferSize">
      <summary>
            取得核心服务接收缓冲区大小
            </summary>
      <remarks>取得核心服务接收缓冲区大小</remarks>
      <value>缓冲区大小[字节]</value>
    </member>
    <member name="P:DYCom_Net2.DYSocketCore.GetMaxUserConnect">
      <summary>
            取得最大用户连接数
            </summary>
      <remarks>取得最大用户连接数</remarks>
      <value>最大用户连接数[Int]</value>
    </member>
    <member name="T:DYCom_Net2.JsonMapper">
      <summary>
            JSON序列化器
            </summary>
    </member>
    <member name="M:DYCom_Net2.JsonMapper.#ctor">
      <summary>
            JSON序列化器实例
            </summary>
      <remarks>用于把类型与字符串之间的转换操作.</remarks>
      <returns>构建一个JSON序列化器实例</returns>
    </member>
    <member name="M:DYCom_Net2.JsonMapper.ToJson(System.Object)">
      <summary>
            将类型实例序列化为JSON字符串
            </summary>
      <remarks>将类型实例序列化为JSON字符串</remarks>
      <param name="obj">实例对象</param>
      <returns>序列化后的字符串</returns>
    </member>
    <member name="M:DYCom_Net2.JsonMapper.ToObject``1(System.String)">
      <summary>
            将JSON字符串反序列化为类型实例
            </summary>
      <remarks>将JSON字符串反序列化为类型实例</remarks>
      <param name="json">要反序列化的JSON字符串</param>
      <returns>反序列化后的对象实例</returns>
    </member>
    <member name="T:DYCom_Net2.UserInfo">
      <summary>
            客户端Base实例
            </summary>
    </member>
    <member name="T:DYCom_Net2.Queuer">
      <summary>
            消息队列
            </summary>
    </member>
    <member name="M:DYCom_Net2.Queuer.ClearQueues">
      <summary>
            清空消息队列
            </summary>
      <remarks>清空消息队列正在排队中的所有消息,调用本方法将会导致消息不发送的可能.</remarks>
    </member>
    <member name="M:DYCom_Net2.UserInfo.#ctor">
      <summary>
            接入客户端构造函数
            </summary>
      <remarks>客户端用户自定义类必须继承于此类,否则将不能进行发送操作</remarks>
    </member>
    <member name="M:DYCom_Net2.UserInfo.SetSendBuffer(System.Int32)">
      <summary>
            设置用户发送缓冲区
            </summary>
      <remarks>此值必须是你将要发送的单个消息之最大可能值。如果发送消息大小大于此值将会触发SendErrorHandler事件.</remarks>
      <param name="Size">缓冲区大小.参数类型:int,表述单位为字节</param>
    </member>
    <member name="M:DYCom_Net2.UserInfo.SetupTimeoutCheck(DYCom_Net2.DYComer,System.Int32)">
      <summary>
            设置用户静止超时时间
            </summary>
      <remarks>以用户最后一次到来消息时间开始计算，当用户在指定时间值内没有任何消息到来将会自动关闭此客户端的连接</remarks>
      <param name="server">当前DYComer实例，作用是提供断开客户端时操作.</param>
      <param name="TimeOutSeconds">设置允许静止最大时间值，超过此值时服务端将主动断开客户端，单位(秒).</param>
    </member>
    <member name="M:DYCom_Net2.UserInfo.SocketClose">
      <summary>
            关闭本客户端
            </summary>
      <remarks>切底断开并释放此客户端，此方法客户端将会捕捉到断开状态</remarks>
    </member>
    <member name="P:DYCom_Net2.UserInfo.SessionId">
      <summary>
            实例唯一ID
            </summary>
      <remarks>此值是每个客户端独有的唯一标识，在客户端接入时系统自动标识</remarks>
    </member>
    <member name="P:DYCom_Net2.UserInfo.SendHandle">
      <summary>
            错误提示代理事件
            </summary>
      <remarks>此代理所注册的事件会捕捉到客户端通信过程中可能出现的异常</remarks>
    </member>
    <member name="P:DYCom_Net2.UserInfo.Sock">
      <summary>
            接入实例Socket实例
            </summary>
      <remarks>处理消息Socket实例,发送消息通道和接收消息通道均派生于现实例.</remarks>
    </member>
    <member name="T:DYCom.DYcryption">
      <summary> 
            加密组件
            </summary>
    </member>
    <member name="M:DYCom.DYcryption.EncryptDES(System.Byte[],System.String)">
      <summary>
            DES加密消息
            </summary>
      <param name="input">须加密的数据</param>
      <param name="password">加密口令，须为8位字符串，否则返加null值</param>
      <returns>加密后byte[]消息内容</returns>
    </member>
    <member name="M:DYCom.DYcryption.DecryptDES(System.Byte[],System.String)">
      <summary>
            DES解密消息
            </summary>
      <param name="Input">须解密的数据</param>
      <param name="password">解密口令，与加密口令必须一致,须为8位字符串，否则返加null值</param>
      <returns>解密后byte[]消息内容</returns>
    </member>
    <member name="T:DYCom_Net2.ConnectHandler">
      <summary>
            DYSocketCore的连接代理
            </summary>
      <param name="socketAsync">dysocket实例</param>
      <param name="IsConneted">连接结果</param>
    </member>
    <member name="T:DYCom_Net2.OndataHandler">
      <summary>
            DYSocketCore的数据包输入代理
            </summary>
      <param name="data">输入包</param>
      <param name="socketAsync">dysocket实例</param>
    </member>
    <member name="T:DYCom_Net2.ErrorHandler">
      <summary>
            DYSocketCore的异常错误,通常是用户断开的代理
            </summary>
      <param name="message">消息</param>
      <param name="socketAsync">dysocket实例</param>
    </member>
    <member name="T:DYCom_Net2.SendErrorHandler">
      <summary>
            UserInfo中的异常错误,通常是客户端缓冲区小于消息大小
            </summary>
      <param name="message">消息</param>
    </member>
    <member name="T:DYCom_Net2.OnConnet">
      <summary>
            DYComer的连接通知
            </summary>
    </member>
    <member name="T:DYCom_Net2.OnData">
      <summary>
            DYComer的消息通知
            </summary>
    </member>
    <member name="T:DYCom_Net2.OnDisConnet">
      <summary>
            DYComer的错误通知
            </summary>
    </member>
    <member name="T:DYCom_Net2.DYSocket">
      <summary>
            DYComSocket实例
            </summary>
    </member>
    <member name="P:DYCom_Net2.DYSocket.SocketArgs">
      <summary>
            DYSocket通信对象实例
            </summary>
      <remarks>此实例用以保存客户各种原始实例</remarks>
      <value>返回ScoketAsyncEventArgs类型属性</value>
    </member>
    <member name="T:DYCom_Net2.DYWriter">
      <summary>
            数据包格式化类
            </summary>
    </member>
    <member name="M:DYCom_Net2.DYWriter.Merge(System.Byte[][])">
      <summary>
            将所有输入参数成生一个DYReader编码器可识别的消息
            </summary>
      <remarks>编码成一个可以让DYReader解码的消息</remarks>
      <param name="args">
      </param>
      <returns>成生后的消息</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Int32)">
      <summary>
            Int32变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Int32类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Int16)">
      <summary>
            Int16变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Int16类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Double)">
      <summary>
            Double变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Double类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.DateTime)">
      <summary>
            DateTime变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的DateTime类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Boolean)">
      <summary>
            Boolean变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Boolean类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Int64)">
      <summary>
            Int64变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Int64类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Byte)">
      <summary>
            Byte变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Byte类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.Byte[])">
      <summary>
            Bytes变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的Bytes类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="M:DYCom_Net2.DYWriter.GetDYBytes(System.String,System.Text.Encoding)">
      <summary>
            String变量转换成DYReader可解码的数据
            </summary>
      <remarks>此方法编码可让DYReader解码的String类型变量</remarks>
      <param name="data">写入值,将被编码的变量.</param>
      <param name="encoder">String的Text编码器,如:UTF8,ASCII等等</param>
      <returns>编码后的变量值</returns>
    </member>
    <member name="T:DYCom_Net2.DYReader">
      <summary>
            DYCom消息读取器
            </summary>
    </member>
    <member name="F:DYCom_Net2.DYReader.Current">
      <summary>
            解码器当前游标值
            </summary>
    </member>
    <member name="M:DYCom_Net2.DYReader.Reset">
      <summary>
            重置解码器中的游标指针
            </summary>
      <remarks>重置解码器中的游标指针</remarks>
    </member>
    <member name="M:DYCom_Net2.DYReader.#ctor(System.Byte[])">
      <summary>
            DYCom消息解码器
            </summary>
      <remarks>作用于读取DYWriter编码的消息体</remarks>
      <param name="data">由DYWriter编码的消息体对象</param>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadInt32(System.Int32@)">
      <summary>
            读取解码器中的Int32值
            </summary>
      <remarks>此方法读取由DYWriter编码的Int32数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadDouble(System.Double@)">
      <summary>
            读取解码器中的Double值
            </summary>
      <remarks>此方法读取由DYWriter编码的Double数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadInt64(System.Int64@)">
      <summary>
            读取解码器中的Long值
            </summary>
      <remarks>此方法读取由DYWriter编码的Long数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadBool(System.Boolean@)">
      <summary>
            读取解码器中的Boolean值
            </summary>
      <remarks>此方法读取由DYWriter编码的Bool数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadDateTime(System.DateTime@)">
      <summary>
            读取解码器中的DateTime值
            </summary>
      <remarks>此方法读取由DYWriter编码的DateTime数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadByte(System.Byte@)">
      <summary>
            读取解码器中的一个Byte值
            </summary>
      <remarks>此方法读取由DYWriter编码的Byte数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadInt16(System.Int16@)">
      <summary>
            读取解码器中的Int16值
            </summary>
      <remarks>此方法读取由DYWriter编码的Int16数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadString(System.String@,System.Text.Encoding)">
      <summary>
            读取解码器中的String值
            </summary>
      <remarks>此方法读取由DYWriter编码的String数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <param name="encoder">String的Text编码器,如:UTF8,ASCII等等</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.ReadByteArray(System.Byte[]@)">
      <summary>
            读取解码器中的一段Bytes流值
            </summary>
      <remarks>此方法读取由DYWriter编码的Bytes数据流</remarks>
      <param name="values">读出值,如果读取成功将通过此值保存读出消息。</param>
      <returns>读取结果:True为读取成功，False为读取失败</returns>
    </member>
    <member name="M:DYCom_Net2.DYReader.GetCurrentToEnd">
      <summary>
            读取解码器中剩余部份
            </summary>
      <remarks>取得当前解码器游标以后的所有bytes数据</remarks>
      <returns>当前解码器游标以后的所有bytes数</returns>
    </member>
    <member name="P:DYCom_Net2.DYReader.Length">
      <summary>
            解码器中的流长度
            </summary>
    </member>
  </members>
</doc>